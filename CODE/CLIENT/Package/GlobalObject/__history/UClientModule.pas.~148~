unit UClientModule;

interface

uses
  System.SysUtils, System.Classes, Data.DBXDataSnap, Data.DBXCommon,
  IPPeerClient, Data.DB, Data.SqlExpr,Datasnap.DBClient, Data.FMTBcd,
  Datasnap.DSConnect, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client, FireDAC.Stan.StorageBin, Data.DBXMSSQL, Datasnap.Provider;

type
  TClientModule = class(TDataModule)
    conn: TSQLConnection;
    DSProvider_OpenSQL: TDSProviderConnection;
    DSProvider_OpenPRoc: TDSProviderConnection;
    query_open: TSQLQuery;
    DataSetProvider_query_open: TDataSetProvider;
    DataSetProvider_proc_open: TDataSetProvider;
    query_exec: TSQLQuery;
    proc_exec: TSQLStoredProc;
  private
    { Private declarations }
    function CopyStream(const AStream: TStream): TMemoryStream;
    function CheckRemote:Boolean;
  public
    { Public declarations }
    destructor Destroy; override;
    function ChangeSQLString(const ASQL: string): Integer;
    function ChangeDataBase(const ADataBaseName: string): Boolean; virtual;
    function OpenSQL(const ASQL: string; ADataSet:TClientDataSet):Integer; virtual;
    function ExecSQL(const ASQL: string): Integer;
    function OpenProc(szProcedureName: string; AParamName: array of string;AParamValue: array of OleVariant; ADataSet:TClientDataSet; AParams: TParams): Integer;overload;
    function ExecProc(szProcedureName: string; AParamName: array of string;AParamValue: array of OleVariant; AParams: TParams): Integer;
    function QueryOneFiled(const ASQL: string):Variant;
  end;

var
  ClientDM: TClientModule;

implementation

uses
  UClientDataSnap_LIB,MidasLib, System.Variants;

///客户端必须加入此单元：MidasLib  不然获取 TDSProviderConnection 数据集报错

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

{ TClientModule }

function TClientModule.ChangeDataBase(const ADataBaseName: string): Boolean;
var
  oDataModel: TModuleUnitClient;
begin
  if CheckRemote then
  begin
    try
       //创建应用服务器上的Sample Methods在客户端的实现类
      oDataModel := TModuleUnitClient.Create(conn.DBXConnection);
      Result := oDataModel.ChangeDataBase(ADataBaseName);
    finally
      oDataModel.Free;
    end;
  end else begin
    Conn.Connected := False;
    Conn.Params.Values['DataBase']  := ADataBaseName;
    Conn.Connected := True;
    Result := Conn.Connected;
  end;
end;

function TClientModule.ChangeSQLString(const ASQL: string): Integer;
var
  oDataModel: TModuleUnitClient;
begin
  try
     //创建应用服务器上的Sample Methods在客户端的实现类
    oDataModel := TModuleUnitClient.Create(conn.DBXConnection);
    Result := oDataModel.ChangeSQLString(ASQL);
  finally
    oDataModel.Free;
  end;
end;

function TClientModule.CheckRemote: Boolean;
begin
  Result := conn.DriverName='DataSnap';
end;

function TClientModule.CopyStream(const AStream: TStream): TMemoryStream;
const
  LBufSize = $F000;
var
  LBuffer: TBytes;
  LReadLen: Integer;
begin
  Result := nil;
  if AStream = nil then Exit;
  Result := TMemoryStream.Create;
  try
    if AStream.Size = -1 then
    begin
      SetLength(LBuffer, LBufSize);
      repeat
        LReadLen := AStream.Read(LBuffer[0], LBufSize);
        if LReadLen > 0 then
          Result.WriteBuffer(LBuffer[0], LReadLen);
        if LReadLen < LBufSize then
          break;
      until LReadLen < LBufSize;
    end
    else
      Result.CopyFrom(AStream, 0);
    Result.Position := 0;
  except
    Result.Free;
  end;
end;

destructor TClientModule.Destroy;
begin
  conn.Connected := False;
  inherited;
end;

function TClientModule.ExecProc(szProcedureName: string; AParamName: array of string; AParamValue: array of OleVariant; AParams: TParams): Integer;
var
  oDataModel: TModuleUnitClient;
  Params,outVariant: OleVariant;
  InParams:TParams;
begin
  Result := -1;
  if CheckRemote then
  begin
    InParams := TParams.Create(nil);
    try
      for var i := Low(AParamName) to High(AParamName) do
      begin
        with TParam(InParams.Add) do
        begin
          Name := AParamName[I];
          Value := AParamValue[I];
        end;
      end;
      Params := PackageParams(InParams);
      oDataModel := TModuleUnitClient.Create(conn.DBXConnection);
      outVariant := oDataModel.ExecProc(szProcedureName,Params);
      UnpackParams(outVariant, AParams);
      if Assigned(AParams.FindParam('@RETURN_VALUE')) then Result := AParams.ParamValues['@RETURN_VALUE'];
    finally
      outVariant := Null;
      InParams.Free;
      oDataModel.Free;
    end;
  end else begin
    proc_exec.Active := False;
    proc_exec.StoredProcName := szProcedureName;
    //proc_exec.Prepared := True;
    for var i := Low(AParamName) to High(AParamName) do
    begin
      for var j := 0 to proc_exec.Params.Count-1 do
      begin
        if SameText(proc_exec.Params[j].Name,AParamName[I]) then
        begin
          proc_exec.Params[j].Value := AParamValue[I];
          Break;
        end;
      end;
    end;
    Result := proc_exec.ExecProc;
    AParams.Assign(proc_exec.Params);
  end;
end;

function TClientModule.ExecSQL(const ASQL: string): Integer;
var
  oDataModel: TModuleUnitClient;
begin
  Result := -1;
  if CheckRemote then
  begin
    try
      oDataModel := TModuleUnitClient.Create(conn.DBXConnection);
      Result := oDataModel.ExecSQL(ASQL);
    finally
      oDataModel.Free;
    end;
  end else begin
    query_exec.Active := False;
    query_exec.SQL.Text := ASQL;
    Result := query_exec.ExecSQL();
  end;
end;

function TClientModule.OpenProc(szProcedureName: string; AParamName: array of string; AParamValue: array of OleVariant; ADataSet: TClientDataSet; AParams: TParams): Integer;
var
  oDataModel: TModuleUnitClient;
  inVariant,outVariant: OleVariant;
  InParams:TParams;
begin
  Result := -1;
  ADataSet.Active  := False;
  if CheckRemote then
  begin
    InParams := TParams.Create(nil);
    try
      oDataModel := TModuleUnitClient.Create(conn.DBXConnection);
      for var i := Low(AParamName) to High(AParamName) do
      begin
        with TParam(InParams.Add) do
        begin
          Name := AParamName[I];
          Value := AParamValue[I];
        end;
      end;
      inVariant  := PackageParams(InParams);
      outVariant := oDataModel.OpenProc(szProcedureName,inVariant);
      ADataSet.Active := False;
      ADataSet.RemoteServer := DSProvider_OpenPRoc;
      ADataSet.ProviderName := 'DataSetProvider_Proc_Open';
      ADataSet.Open;
      //再来获取一次，准确的Diss到返回值
      outVariant := oDataModel.OpenProc(szProcedureName,inVariant);
      UnpackParams(outVariant, AParams);
      if Assigned(AParams.FindParam('@RETURN_VALUE')) then Result := AParams.ParamValues['@RETURN_VALUE'];
    finally
      outVariant := Null;
      InParams.Free;
      if Assigned(oDataModel) then oDataModel.Free;
    end;
  end else begin
    var proc_open := TSQLStoredProc.Create(nil);
    try
      proc_open.SQLConnection := conn;
      DataSetProvider_proc_open.DataSet := proc_open;
      proc_open.Active := False;
      proc_open.StoredProcName := szProcedureName;
      //proc_open.Prepared := True;
      for var i := Low(AParamName) to High(AParamName) do
      begin
        for var j := 0 to proc_open.Params.Count-1 do
        begin
          if SameText(proc_open.Params[j].Name,AParamName[I]) then
          begin
            proc_open.Params[j].Value := AParamValue[I];
            Break;
          end;
        end;
      end;
      proc_open.Open;
      ADataSet.Data := DataSetProvider_proc_open.Data;
      AParams.Assign(proc_open.Params);
      if Assigned(AParams.FindParam('@RETURN_VALUE')) then Result := AParams.ParamValues['@RETURN_VALUE'];
    finally
      proc_open.Free;
    end;
  end;
end;

function TClientModule.OpenSQL(const ASQL: string; ADataSet: TClientDataSet): Integer;
var
  oDataModel: TModuleUnitClient;
begin
  Result := -1;
  if CheckRemote then
  begin
    try
      oDataModel := TModuleUnitClient.Create(conn.DBXConnection);
      Result := oDataModel.OpenSQL(ASQL);
      //if ds.Active then Result := ds.RecordCount;
      //while ds.State = dsInactive do sleep(0);  //:确认返回了数据
      ADataSet.Active := False;
      ADataSet.RemoteServer := DSProvider_OpenSQL;
      ADataSet.ProviderName := 'DataSetProvider_Query_Open';
      //ADataSet.SetProvider(ds);
      ADataSet.Open;
    finally
      oDataModel.Free;
    end;
  end else
  begin
    query_open.Active := False;
    query_open.SQL.Text := ASQL;
    query_open.Open;
    ADataSet.Data := DataSetProvider_query_open.Data;
    Result := 0;
  end;
end;

function TClientModule.QueryOneFiled(const ASQL: string): Variant;
var ds:TClientDataSet;
begin
  Result := Null;
  ds := TClientDataSet.Create(nil);
  try
    if OpenSQL(ASQL,ds)<0 then Exit;
    if not ds.Active then Exit;
    if ds.RecordCount=0 then Exit;
    Result := ds.FieldValues[ds.Fields[0].FieldName];
  finally
    ds.Free;
  end;
end;

end.
